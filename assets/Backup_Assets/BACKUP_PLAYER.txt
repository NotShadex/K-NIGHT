from sprite_cutter import *
import time

# GAME SETUP & CONST VALUES
pygame.init()
pygame.display.set_caption("BOOGADABOH")
WIDTH, HEIGHT = 640, 360
FPS = 60
PLAYER_VEL = 7
window = pygame.display.set_mode((WIDTH, HEIGHT))


class Player(pygame.sprite.Sprite):
    # SPRITES
    SPRITES = load_sprite_sheets("Player", 120, 80, True)
    ANIMATION_DELAY = 4
    COLOR = (242, 255, 237)
    # CUSTOM JUMP CONSTANTS
    JUMP_HEIGHT = 3
    JUMP_TIME_TO_PEAK = 0.5
    JUMP_TIME_TO_DESCEND = 0.4
    # DASH CONSTANTS
    DASH_TIME = 0.4
    DASH_COOLDOWN = 1
    # ATTACK CONSTANTS
    ATTACK_COOLDOWN = 0.0
    ATTACK_TIME = 0.28
    COMBO_WINDOW = 1.0

    def __init__(self, spawn_x, spawn_y, width, height):
        super().__init__()
        # ANIMATION AND HITBOXES
        self.rect = pygame.Rect(spawn_x, spawn_y, width, height)
        self.mask = None
        self.direction = "left"
        self.animation_count = 0
        self.sprite = self.SPRITES["idle_left"][0]

        # VELOCITY
        self.vel_x = 0
        self.vel_y = 0

        # JUMP // GRAVITY
        self.jump_velocity = ((2.0 * self.JUMP_HEIGHT) / self.JUMP_TIME_TO_PEAK) * -1.0
        self.jump_gravity = ((-2.0 * self.JUMP_HEIGHT) / (self.JUMP_TIME_TO_PEAK * self.JUMP_TIME_TO_PEAK)) * -1.0
        self.fall_gravity = ((-2.0 * self.JUMP_HEIGHT) / (self.JUMP_TIME_TO_DESCEND * self.JUMP_TIME_TO_DESCEND)) * -1.0
        self.is_on_floor = False

        # DASH
        self.is_dashing = False
        self.dash_end_time = 0
        self.last_dash_time = 0
        self.afterimages = []

        # ATTACK
        self.is_attacking = False
        self.attack_end_time = 0
        self.last_attack_time = 0
        self.combo_start_time = 0
        self.combo_stage = 1
        self.aerial = False

    # HANDLE GRAVITY / JUMP / LAND
    def get_gravity(self):
        return self.jump_gravity if self.vel_y < 0.0 else self.fall_gravity

    def jump(self):
        self.vel_y = self.jump_velocity

    def start_attack(self):
        if self.is_on_floor:
            current_time = time.time()
            if not self.is_attacking and current_time - self.last_attack_time >= self.ATTACK_COOLDOWN:
                if current_time - self.combo_start_time <= self.COMBO_WINDOW:
                    self.combo_stage = 2 if self.combo_stage == 1 else 1

                self.animation_count = 0
                self.is_attacking = True
                self.attack_end_time = current_time + self.ATTACK_TIME
                self.last_attack_time = current_time
                self.combo_start_time = current_time

    def update_attack(self):
        if self.is_attacking:
            if time.time() >= self.attack_end_time:
                self.is_attacking = False

            if time.time() - self.combo_start_time > self.COMBO_WINDOW:
                self.combo_stage = 1

    # HANDLE DASH AND ITS TIMER
    def start_dash(self):
        current_time = time.time()
        if not self.is_dashing and current_time - self.last_dash_time >= self.DASH_COOLDOWN:
            self.is_dashing = True
            self.dash_end_time = current_time + self.DASH_TIME
            self.last_dash_time = current_time

    def update_dash(self):
        if self.is_dashing:
            self.add_afterimage()
            if time.time() >= self.dash_end_time:
                self.is_dashing = False
                self.vel_x = 0

        new_afterimages = []
        for img, pos, alpha in self.afterimages:
            alpha -= 25
            if alpha > 0:
                new_afterimages.append((img, pos, alpha))
        self.afterimages = new_afterimages

    def add_afterimage(self):
        """Adds the information about the sprite and the positioning of the rect and the alpha (transparency)
           It is called only when is_dashing is True"""
        afterimage = (self.sprite, self.rect.topleft, 200)
        self.afterimages.append(afterimage)

    def draw_afterimage(self, win, offset_x, offset_y):
        """Sets the "ghost" image behind the sprite lowers the alpha every turn which is called in update_dash function
           had to keep in mind to have the player x and y offset otherwise it is behind and lower to the actual player"""
        for img, pos, alpha in self.afterimages:
            ghost = img.copy()
            ghost.set_alpha(alpha)
            win.blit(ghost, (pos[0] - offset_x, pos[1] - offset_y))

    # HANDLE MOVEMENT / ANIMATION
    def move(self, dx, dy):
        """Handles the movement of the rect itself.
           rect.x, rect.y can be used as coordinates"""
        self.rect.x += dx
        self.rect.y += dy

    def move_left(self, vel):
        self.vel_x = -vel
        if self.direction != "left":
            self.direction = "left"
            self.animation_count = 0

    def move_right(self, vel):
        self.vel_x = vel
        if self.direction != "right":
            self.direction = "right"
            self.animation_count = 0

    def move_down(self, fps):
        """Experimental works kinda weird you might need to fix this"""
        self.vel_y += self.get_gravity() / fps * 2

    # HANDLE ANIMATION
    def update_sprite(self, fps):
        """Handles all the animation of the player"""

        # Defining the first frame
        sprite_sheet = "idle"
        if self.vel_y < 0:
            sprite_sheet = "jump"
        elif self.vel_y > self.get_gravity() / fps * 2:
            sprite_sheet = "fall"
        # This is very retarded, but it works for now so fucking leave it as it is
        elif (self.vel_y >= self.get_gravity() / fps or round(self.vel_y) == 0) and not self.is_on_floor:
            sprite_sheet = "jumptran"
        # RUNNING
        elif self.is_attacking:
            match self.combo_stage:
                case 1: sprite_sheet = "attack1"
                case 2: sprite_sheet = "attack2"
        elif self.vel_x != 0:
            if self.is_on_floor:
                sprite_sheet = "run"
        if self.is_dashing:
            sprite_sheet = "dash"

        # print(f"State : {sprite_sheet} Vel Y: {self.vel_y} Gravity : {self.get_gravity() / fps}")
        print(self.is_attacking)
        sprite_sheet_name = sprite_sheet + "_" + self.direction
        sprites = self.SPRITES[sprite_sheet_name]
        sprite_index = (self.animation_count // self.ANIMATION_DELAY) % len(sprites)
        self.sprite = sprites[sprite_index]
        self.animation_count += 1
        self.update()

    def update(self):
        self.rect = self.sprite.get_rect(topleft=(self.rect.x, self.rect.y))
        self.mask = pygame.mask.from_surface(self.sprite)

    # HANDLE UPDATING THE PLAYER
    def loop(self, fps):
        self.move(self.vel_x, self.vel_y)
        self.update_sprite(fps)

        # For testing purposes
        ground_level = 460
        if self.rect.bottom >= ground_level:
            self.rect.bottom = ground_level
            self.vel_y = 0
            self.is_on_floor = True
        else:
            self.vel_y += self.get_gravity() / fps
            self.is_on_floor = False

        # IGNORE GRAVITY IF DASHING (it looks cooler)
        if self.is_dashing:
            self.vel_y = 0

    def draw(self, win, offset_x, offset_y):
        """Handles the drawing of the player and the offset"""
        # For dash afterimage
        self.draw_afterimage(win, offset_x, offset_y)
        # Handles the drawing of the player itself!
        win.blit(self.sprite, (self.rect.x - offset_x, self.rect.y - offset_y))


# HANDLE KEYS PRESSED
def handle_move(player, objects, fps):
    keys = pygame.key.get_pressed()

    player.vel_x = 0
    collide_left = collide(player, objects, -PLAYER_VEL * 3)
    collide_right = collide(player, objects, PLAYER_VEL * 3)

    if not player.is_attacking or player.aerial:
        if keys[pygame.K_a] and not collide_left and not keys[pygame.K_d]:
            player.move_left(PLAYER_VEL)
        elif keys[pygame.K_d] and not collide_right and not keys[pygame.K_a]:
            player.move_right(PLAYER_VEL)

    # HANDLE DASHING AND LOGIC
    if player.is_dashing:
        if player.direction == "left":
            if collide_left:
                player.is_dashing = False
            else:
                player.move_left(PLAYER_VEL * 3)
        elif player.direction == "right":
            if collide_right:
                player.is_dashing = False
            else:
                player.move_right(PLAYER_VEL * 3)

    # collide_vertical(player, objects, player.vel_y)


# HANDLE COLLISION TODO : dx || dy variables just move the rect itself nothing else
def collide(player, objects, dx):
    player.move(dx, 0)
    player.update()

    collided_object = None
    for obj in objects:
        if pygame.sprite.collide_mask(player, obj):
            collided_object = obj
            break
    player.move(-dx, 0)
    player.update()

    return collided_object






